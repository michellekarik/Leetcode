/*
Top k frequent elements

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
 
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]


Approach(Best): So we store the elements along with their frequencies in a hash map. We use a priority queue of size k. We sort the frquencies of the elements in the ascending order of priority queue. And retireve those unique values from the priority queue. 
TIME COMPLEXITY: O(n * log k)
SPACE COMPLEXITY: O(n)

heapq is a Python module that provides an implementation of a heap queue algorithm (also known as a priority queue). A heap is a special kind of binary tree where the parent node is either greater than or smaller than its children, depending on whether it's a max-heap or min-heap.  

Counter is used to efficiently count the frequency of each element in the nums list, so we can easily determine which elements are the most frequent.
For example, using Counter(nums) on the input nums = [1, 1, 1, 2, 2, 3] gives us:
Counter({1: 3, 2: 2, 3: 1})
*/

import heapq
from collections import Counter

class Solution:
    def topKFrequent(self, nums, k):
                                                                         
        count = Counter(nums)                    # Step 1: Count the frequency of each element using Counter
        
                                            
	 heap = []                                        # Step 2: Use a min-heap to keep the top k frequent elements
							        # We use a heap of (frequency, element) tuples
        
        for num, freq in count.items():
                    heapq.heappush(heap, (freq, num))  # Push the (frequency, element) tuple
                    if len(heap) > k:
                             heapq.heappop(heap)  # Remove the smallest frequency element to maintain the size
        
        return [num for freq, num in heap]      # Step 3: Extract the top k frequent elements from the heap


sol = Solution()
nums = [1,1,1,2,2,3]
k = 2
print(sol.topKFrequent(nums, k))                              # Output: [1, 2]
