from collections import Counter
class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        if len(t)==0 or len(t)>len(s):
            return ""

        mapT = Counter(t)         
        required = len(mapT)         """
                                      to increase frequency of chars in the dictonary
                                      dictT = {}
                                      for c in len(l):
                                          dictT[c] = dictT.get(c, 0) + 1
                                     """
        
                
        right = 0
        left= 0
        answ = [-1, 0, 0] #length, left, right
        create = 0
        substringSMap = {}
        while right<len(s):
            c = s[right]
            substringSMap[c] = substringSMap.get(c, 0) + 1
            if c in mapT and substringSMap[c]==mapT[c]:
                create += 1

            while left<=right and create==required:
                if answ[0] ==-1 or right-left+1 <answ[0]:
                    answ=[right-left+1, left, right]
                left_char = s[left]
                substringSMap[left_char] -= 1
                if left_char in mapT and substringSMap[left_char] < mapT[left_char]:
                    create -= 1
                left += 1
            right += 1 
        return "" if answ[0]==-1 else s[answ[1]:answ[2]+1]        """length of string from left index to right index index +1"""   
                
