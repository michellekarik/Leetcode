/* Given two strings s and t, return true if t is an anagram of s, and false otherwise.
s and t contains only lowercase English alphabets

Approach1: Using Brute Force we compare every single character in s with every single character in t, if the char is present we remove it from t. We repeat this untill s string's last char. If t gets empty it means t is a valid anagram of s. However the time complexity is O(n^2).
*/

class Solution(object):
    def isAnagram(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        # Convert both strings to lists to allow removal of characters
        s_list = list(s)
        t_list = list(t)
        
        # For each character in s, check if it exists in t and remove it
        for char in s_list:
            if char in t_list:
                t_list.remove(char)
            else:
                return False  # If character in s is not found in t, not an anagram

        # After processing all characters, if t is empty, it's a valid anagram
        return len(t_list) == 0


/*Approach2(best): Firstly we check the length of s and t. The length of chars should match. If they don't we eliminate them already. Now we set up a static array of size 26 (0 to 25) and a index 0, b index 1 etc. For each char in s we increment the frequency of that char in count 
array. For each char in t we decrement the count of char in count array. If at the end each entry in the count array is zero, it means s and t are anagrams of each other. Time complexity O(n) because we go through the count array only once. Space complexity is O(1) constant since the
charectars in English alphabet is 26 regardless.  */
class Solution:
    def isAnagram(self, s, t):
        # If lengths of s and t are not the same, they can't be anagrams
        if len(s) != len(t):
            return False
        
        # Initialize a count array for 26 English lowercase letters
        count = [0] * 26
        
        # Count characters in both strings
        for i in range(len(s)):
            count[ord(s[i]) - ord('a')] += 1  # Increment count for char in s
            count[ord(t[i]) - ord('a')] -= 1  # Decrement count for char in t
        
        # If all counts are 0, the strings are anagrams
        for c in count:
            if c != 0:
                return False
        
        return True

